#!/bin/bash

#Create a new directory
mkdir express-app
cd express-app

#Initialize an empty nodejs project
npm init -y

#Install the dependencies
npm install express

#Install dev dependencies
npm install -D @types/express
npm install -D typescript
npm install -D ts-node

#Initialize ts-config file
tsc --init

#Create a src directory
mkdir src

#Create index.ts file in src directory
touch src/index.ts

#Edit tsconfig file to set rootDir and outDir
sed -i '30s#.*#  	"rootDir": "./src",#' tsconfig.json
sed -i '62s#.*# 	 "outDir": "./dist",#' tsconfig.json

#Edit the script tag in package.json
sed -i '/"scripts": {/a\
  "dev": "ts-node src/index.ts",\
  "build": "tsc -b",\
  "start": "node dist/index.js",' package.json

#Create a basic express server
cd src
cat  <<EOF >> index.ts
import express from "express";

const app = express();
const port = 3000;

app.get("/", (req, res) => {
	res.send("Hello World");
});

app.listen(port, () => {
	console.log(\`listining on port \${port}\`);
});
EOF

#Create gitignore file
cd ..
touch .gitignore
cat  <<EOF >> .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# End of https://mrkandreev.name/snippets/gitignore-generator/#Node
EOF
echo "Express app created successfully!"
